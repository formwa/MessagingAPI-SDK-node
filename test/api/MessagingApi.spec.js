/**
 * Telstra Messaging API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.2.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TelstraMessaging);
  }
}(this, function(expect, TelstraMessaging) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TelstraMessaging.MessagingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessagingApi', function() {
    describe('getMmsStatus', function() {
      it('should call getMmsStatus successfully', function(done) {
        //uncomment below and update the code to test getMmsStatus
        //instance.getMmsStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSmsStatus', function() {
      it('should call getSmsStatus successfully', function(done) {
        //uncomment below and update the code to test getSmsStatus
        //instance.getSmsStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mmsHealthCheck', function() {
      it('should call mmsHealthCheck successfully', function(done) {
        //uncomment below and update the code to test mmsHealthCheck
        //instance.mmsHealthCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveMmsReplies', function() {
      it('should call retrieveMmsReplies successfully', function(done) {
        //uncomment below and update the code to test retrieveMmsReplies
        //instance.retrieveMmsReplies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveSmsReplies', function() {
      it('should call retrieveSmsReplies successfully', function(done) {
        //uncomment below and update the code to test retrieveSmsReplies
        //instance.retrieveSmsReplies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMms', function() {
      it('should call sendMms successfully', function(done) {
        //uncomment below and update the code to test sendMms
        //instance.sendMms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMultipleSms', function() {
      it('should call sendMultipleSms successfully', function(done) {
        //uncomment below and update the code to test sendMultipleSms
        //instance.sendMultipleSms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendSms', function() {
      it('should call sendSms successfully', function(done) {
        //uncomment below and update the code to test sendSms
        //instance.sendSms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('smsHealthCheck', function() {
      it('should call smsHealthCheck successfully', function(done) {
        //uncomment below and update the code to test smsHealthCheck
        //instance.smsHealthCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
