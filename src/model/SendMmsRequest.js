/**
 * Telstra Messaging API
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MMSContent'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MMSContent'));
  } else {
    // Browser globals (root is window)
    if (!root.TelstraMessaging) {
      root.TelstraMessaging = {};
    }
    root.TelstraMessaging.SendMmsRequest = factory(root.TelstraMessaging.ApiClient, root.TelstraMessaging.MMSContent);
  }
}(this, function(ApiClient, MMSContent) {
  'use strict';




  /**
   * The SendMmsRequest model module.
   * @module model/SendMmsRequest
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>SendMmsRequest</code>.
   * @alias module:model/SendMmsRequest
   * @class
   * @param from {String} This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.
   * @param to {String} This is the destination address.
   * @param subject {String} The subject that will be used in an MMS message.
   * @param replyRequest {Boolean} If set to true, the reply message functionality will be implemented and the to address will be ignored if present.
   * @param mMSContent {Array.<module:model/MMSContent>} An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.
   */
  var exports = function(from, to, subject, replyRequest, mMSContent) {
    var _this = this;

    _this['from'] = from;
    _this['to'] = to;
    _this['subject'] = subject;
    _this['replyRequest'] = replyRequest;
    _this['MMSContent'] = mMSContent;
  };

  /**
   * Constructs a <code>SendMmsRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SendMmsRequest} obj Optional instance to populate.
   * @return {module:model/SendMmsRequest} The populated <code>SendMmsRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('from')) {
        obj['from'] = ApiClient.convertToType(data['from'], 'String');
      }
      if (data.hasOwnProperty('to')) {
        obj['to'] = ApiClient.convertToType(data['to'], 'String');
      }
      if (data.hasOwnProperty('subject')) {
        obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
      }
      if (data.hasOwnProperty('replyRequest')) {
        obj['replyRequest'] = ApiClient.convertToType(data['replyRequest'], 'Boolean');
      }
      if (data.hasOwnProperty('MMSContent')) {
        obj['MMSContent'] = ApiClient.convertToType(data['MMSContent'], [MMSContent]);
      }
    }
    return obj;
  }

  /**
   * This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.
   * @member {String} from
   */
  exports.prototype['from'] = undefined;
  /**
   * This is the destination address.
   * @member {String} to
   */
  exports.prototype['to'] = undefined;
  /**
   * The subject that will be used in an MMS message.
   * @member {String} subject
   */
  exports.prototype['subject'] = undefined;
  /**
   * If set to true, the reply message functionality will be implemented and the to address will be ignored if present.
   * @member {Boolean} replyRequest
   */
  exports.prototype['replyRequest'] = undefined;
  /**
   * An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.
   * @member {Array.<module:model/MMSContent>} MMSContent
   */
  exports.prototype['MMSContent'] = undefined;



  return exports;
}));


